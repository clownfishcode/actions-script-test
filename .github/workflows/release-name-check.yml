name: Release Name Check Workflow

on:
  workflow_call:
    outputs:
      release_name_check_result:
        value: ${{ jobs.pre-check.outputs.release_name_check_result }}

jobs:
  pre-check:
    runs-on: ubuntu-latest
    name: check pull request is release
    outputs:
      release_name_check_result: ${{ steps.result.outputs.release_name_check_result }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Pull Request Title
        id: check_title
        run: |          # 获取 Pull Request 的标题
          pr_title=$(cat $GITHUB_EVENT_PATH | jq -r '.pull_request.title')
          echo "PR Title: $pr_title"

          # 转换为小写
          pr_title_lower=$(echo "$pr_title" | tr '[:upper:]' '[:lower:]')
          echo "PR Title (Lowercase): $pr_title_lower"

          # 判断是否以 'release-' 开头
          if [[ $pr_title_lower == release-* ]]; then
            echo "Title starts with 'release-' (case-insensitive)"
            echo "starts_with_release=true" >> $GITHUB_OUTPUT
          else
            echo "Title does not start with 'release-' (case-insensitive)"
            echo "starts_with_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Read Pull Request Info
        if: ${{ steps.check_title.outputs.starts_with_release == 'true' }}
        id: pr-info
        run: |
          title=$(cat $GITHUB_EVENT_PATH | jq -r '.pull_request.title')
          echo "Pull Request Title: $title"
          echo "title=$title" >> $GITHUB_OUTPUT
          body=$(cat $GITHUB_EVENT_PATH | jq -r '.pull_request.body')
          echo "PR Body: $body"
          echo "body<<EOF"$'\n'"$body"$'\n'EOF >> "$GITHUB_OUTPUT"

      - name: Extract info from pom.xml
        if: ${{ steps.check_title.outputs.starts_with_release == 'true' }}
        id: extract-info
        run: |
          groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Pom GroupId: $groupId"
          echo "Pom ArtifactId: $artifactId"
          echo "Pom Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "artifactId=$artifactId" >> $GITHUB_OUTPUT
          echo "groupId=$groupId" >> $GITHUB_OUTPUT

      - name: Check Maven Central Repository
        if: ${{ steps.check_title.outputs.starts_with_release == 'true' }}
        id: check-maven-central
        run: |
          version="${{ steps.extract-info.outputs.version }}"
          groupId="${{ steps.extract-info.outputs.groupId }}"
          artifactId="${{ steps.extract-info.outputs.artifactId }}"
          URL=https://repo1.maven.org/maven2/$(echo $groupId | tr . /)/${artifactId}/maven-metadata.xml
          echo $URL

          # 检查 URL 是否存在
          RESPONSE_CODE=$(curl -sSL -o /dev/null -w "%{http_code}" "$URL")
          echo $RESPONSE_CODE

          if [ "$RESPONSE_CODE" == "200" ]; then
            # 文件存在，继续检查版本
            RESPONSE=$(curl -sSL "$URL")
            if echo "$RESPONSE" | grep "<version>$version</version>" > /dev/null; then
              echo "Version $version exists in Maven Central."
              exit 1
            else
              echo "Version $version does not exist in Maven Central."
            fi
          elif [ "$RESPONSE_CODE" == "404" ]; then
            echo "The metadata file for $groupId:$artifactId does not exist in Maven Central."
          else
            echo "An unexpected error occurred while checking the metadata file for $groupId:$artifactId."
          fi

      - name: Validate Pull Request Title
        id: validate-title
        if: ${{ steps.check_title.outputs.starts_with_release == 'true' }}
        run: |          # 读取 Pull Request 标题和版本号
          title="${{ steps.pr-info.outputs.title }}"
          version="${{ steps.extract-info.outputs.version }}"
          echo "Pull Request Title: $title"
          echo "Version: $version"
          # 转换为小写并进行条件判断
          if [[ "${title,,}" =~ ^release-$version$ ]]; then
            echo "Pull Request title is valid."
          else
            echo "Pull Request title must be in the format 'release-$version'."
            exit 1
          fi

      - name: Set Result
        id: result
        run: |
          if [ ${{ steps.check_title.outputs.starts_with_release }} == 'true' ]; then
            echo "Release name check passed."
            echo "release_name_check_result=true" >> $GITHUB_OUTPUT
          else
            echo "Release name check failed."
            echo "release_name_check_result=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
