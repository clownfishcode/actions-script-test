# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Release

on:
  pull_request:
    types: [closed]

jobs:
  validate-pr-name:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go Environment (includes jq)
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # 使用 Go 1.20 或者您需要的版本

      - name: Read Pull Request Title
        id: pr-title
        run: |          # 读取 Pull Request 事件 JSON 文件
          title=$(jq -r '.pull_request.title' $GITHUB_EVENT_PATH)
          echo "Pull Request Title: $title"
          echo "pr_title=$title" >> $GITHUB_OUTPUT

      - name: Extract Version from POM
        id: extract-version
        run: |          # 从 pom.xml 文件中提取版本号
          version=$(grep -oP '(?<=<version>)[^<]+' pom.xml)
          echo "Version from POM: $version"
          echo "pom_version=$version" >> $GITHUB_OUTPUT

      - name: Validate Pull Request Title
        run: |          # 读取 Pull Request 标题和版本号
          title="${{ steps.pr-title.outputs.pr_title }}"
          version="${{ steps.extract-version.outputs.pom_version }}"
          
          # 验证 Pull Request 标题
          if [[ "$title" =~ ^release-.*-$version$ ]]; then
            echo "Pull Request title is valid."
          else
            echo "Pull Request title must be in the format 'release-[any-text]-$version'."
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    name: release
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

#    - name: Set up Github packages
#      uses: actions/setup-java@v4
#      with: # running setup-java again overwrites the settings.xml
#        java-version: '8'
#        distribution: 'temurin'
#        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
#        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
#
#    - name: Publish to Github packages
#      run: mvn -B deploy
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Set up Maven Central Repository
      uses: actions/setup-java@v4
      with: # running setup-java again overwrites the settings.xml
        java-version: '8'
        distribution: 'temurin'
        server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_USERNAME # env variable for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Publish to Apache Maven Central
      run: mvn -DskipPublishing=false -B deploy
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}



